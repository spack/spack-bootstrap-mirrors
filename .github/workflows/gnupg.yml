name: "GnuPG"

on:
  push:
    branches:
      - main
    tags:        
      - v0.**
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: gnupg-${{ github.ref }}
  cancel-in-progress: true

env:
  SPACK_COLOR: always
  SPACK_BACKTRACE: please
  PYTHONUNBUFFERED: 1

jobs:
  macos_gnupg:
    runs-on: ${{ matrix.runner[0] }}
    strategy:
      # List of:
      # 1. Runners
      # 2. Target architectures
      # 3. macOS deployment target
      matrix:
        runner: [
          ["macos-13", "x86_64", "10.13"],  # highsierra
          ["macos-14", "aarch64", "11"]     # bigsur
        ]
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.runner[2] }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: spack/spack
          path: spack
          ref: d36452cf4e70fa1da8b9db43921850872b82ced9
      - name: Install gnupg
        run: |
          brew install gawk perl

          # Disables internationalization to avoid linking to
          # libintl on MacOS, since that will make the binary
          # non portable
          git -C spack apply "$PWD/gnupg/patches/gnupg_macos.patch"

          . spack/share/spack/setup-env.sh
          spack external find --not-buildable gawk perl
          spack config add "config:install_tree:padded_length:256"

          spack install gnupg target=${{ matrix.runner[1] }}
          spack buildcache push --unsigned ./binary-mirror gnupg
      - uses: actions/upload-artifact@v3
        with:
          name: gnupg_binary_mirror
          path: binary-mirror

  manylinux2014:
    runs-on: ["self-hosted", "Linux"]
    outputs:
      spack_manylinux_tag: ${{ fromJSON(steps.docker_meta.outputs.json).tags[0] }}

    steps:
      - uses: actions/checkout@v4

      # Setup tags to be used for docker images
      - uses: docker/metadata-action@v5
        id: docker_meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/gnupg_manylinux2014

      # Login to Github Packages
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v3
        id: qemu
        with:
          platforms: linux/ppc64le,linux/arm64,linux/amd64

      - uses: docker/setup-buildx-action@v3

      # Build and eventually push to registry
      - uses: docker/build-push-action@v5
        with:
          file: ./gnupg/Dockerfile.manylinux2014
          platforms: linux/arm64,linux/ppc64le,linux/amd64
          pull: ${{ github.event_name == 'pull_request' }}
          cache-from: |
            ghcr.io/${{ github.repository_owner }}/gnupg_manylinux2014:main
            ${{ steps.docker_meta.outputs.tags }}
          cache-to: type=inline
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  upload-manylinux2014:
    runs-on: ubuntu-latest
    needs: [ manylinux2014 ]
    env:
      SPACK_MANYLINUX2014_TAG: ${{ needs.manylinux2014.outputs.spack_manylinux_tag }}

    steps:
      - uses: actions/checkout@v4
      - run: ./copy_mirror_manylinux2014.sh
      - uses: actions/upload-artifact@v3
        with:
          name: gnupg_binary_mirror
          path: binary-mirror

  gnupg_json:
    runs-on: ubuntu-latest
    needs: [ upload-manylinux2014, macos_gnupg ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: spack/spack
          path: spack
          ref: d36452cf4e70fa1da8b9db43921850872b82ced9
      - uses: actions/download-artifact@v3
        with:
          name: gnupg_binary_mirror
      - run: ./spack/bin/spack python ./generate_bootstrap_json.py gnupg
      - uses: actions/upload-artifact@v3
        with:
          name: gnupg_manifest
          path: gnupg.json
